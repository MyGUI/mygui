<?xml version="1.0" encoding="UTF-8"?>
<Root>

	<TypeHolder>

		<TypeInfo name="int">
			<TypeName>int</TypeName>
			<MarshalTypeName>int</MarshalTypeName>
			<MarshalTypeNameReturn>int</MarshalTypeNameReturn>
		</TypeInfo>

		<TypeInfo name="float">
			<TypeName>float</TypeName>
			<MarshalTypeName>float</MarshalTypeName>
			<MarshalTypeNameReturn>float</MarshalTypeNameReturn>
		</TypeInfo>

		<TypeInfo name="bool">
			<TypeName>bool</TypeName>
			<MarshalTypeName>bool</MarshalTypeName>
			<MarshalTypeNameReturn>bool</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.U1)]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.U1)]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="bool &amp;">
			<TypePrefix>ref</TypePrefix>
			<TypeName>bool</TypeName>
			<MarshalTypeName>bool</MarshalTypeName>
			<MarshalTypeNameReturn>bool</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.U1)]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.U1)]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="size_t">
			<TypeName>uint</TypeName>
			<MarshalTypeName>uint</MarshalTypeName>
			<MarshalTypeNameReturn>uint</MarshalTypeNameReturn>
		</TypeInfo>

		<TypeInfo name="unsigned int">
			<TypeName>uint</TypeName>
			<MarshalTypeName>uint</MarshalTypeName>
			<MarshalTypeNameReturn>uint</MarshalTypeNameReturn>
		</TypeInfo>


		<TypeInfo name="const MyGUI::UString &amp;">
			<TypeName>string</TypeName>
			<MarshalTypeName>string</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.LPWStr)]</MarshalAs>
			<MarshalConvertBefore> Marshal.PtrToStringUni( </MarshalConvertBefore>
			<MarshalConvertPost> ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="MyGUI::UString">
			<TypeName>string</TypeName>
			<MarshalTypeName>string</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.LPWStr)]</MarshalAs>
			<MarshalConvertBefore> Marshal.PtrToStringUni( </MarshalConvertBefore>
			<MarshalConvertPost> ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="const std::string &amp;">
			<TypeName>string</TypeName>
			<MarshalTypeName>string</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.LPStr)]</MarshalAs>
			<MarshalConvertBefore> Marshal.PtrToStringAnsi( </MarshalConvertBefore>
			<MarshalConvertPost> ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="std::string">
			<TypeName>string</TypeName>
			<MarshalTypeName>string</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.LPStr)]</MarshalAs>
			<MarshalConvertBefore> Marshal.PtrToStringAnsi( </MarshalConvertBefore>
			<MarshalConvertPost> ) </MarshalConvertPost>
		</TypeInfo>


		<TypeInfo name="MyGUI::types::TPoint &lt; int &gt;">
			<TypeName>IntPoint</TypeName>
			<MarshalTypeName>IntPoint</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (IntPoint)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntPoint) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="const MyGUI::types::TPoint &lt; int &gt; &amp;">
			<TypeName>IntPoint</TypeName>
			<MarshalTypeName>IntPoint</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (IntPoint)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntPoint) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TPoint &lt; int &gt; &amp;">
			<TypeName>IntPoint</TypeName>
			<MarshalTypeName>IntPoint</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In, Out]</MarshalAs>
			<MarshalConvertBefore> (IntPoint)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntPoint) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TPoint &lt; float &gt;">
			<TypeName>FloatPoint</TypeName>
			<MarshalTypeName>FloatPoint</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (FloatPoint)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatPoint) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="const MyGUI::types::TPoint &lt; float &gt; &amp;">
			<TypeName>FloatPoint</TypeName>
			<MarshalTypeName>FloatPoint</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (FloatPoint)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatPoint) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TPoint &lt; float &gt; &amp;">
			<TypeName>FloatPoint</TypeName>
			<MarshalTypeName>FloatPoint</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In, Out]</MarshalAs>
			<MarshalConvertBefore> (FloatPoint)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatPoint) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="MyGUI::types::TSize &lt; int &gt;">
			<TypeName>IntSize</TypeName>
			<MarshalTypeName>IntSize</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (IntSize)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntSize) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="const MyGUI::types::TSize &lt; int &gt; &amp;">
			<TypeName>IntSize</TypeName>
			<MarshalTypeName>IntSize</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalConvertBefore> (IntSize)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntSize) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TSize &lt; int &gt; &amp;">
			<TypeName>IntSize</TypeName>
			<MarshalTypeName>IntSize</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In, Out]</MarshalAs>
			<MarshalConvertBefore> (IntSize)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntSize) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="MyGUI::types::TSize &lt; float &gt;">
			<TypeName>FloatSize</TypeName>
			<MarshalTypeName>FloatSize</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (FloatSize)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatSize) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="const MyGUI::types::TSize &lt; float &gt; &amp;">
			<TypeName>FloatSize</TypeName>
			<MarshalTypeName>FloatSize</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (FloatSize)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatSize) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TSize &lt; float &gt; &amp;">
			<TypeName>FloatSize</TypeName>
			<MarshalTypeName>FloatSize</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In, Out]</MarshalAs>
			<MarshalConvertBefore> (FloatSize)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatSize) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="MyGUI::types::TCoord &lt; int &gt;">
			<TypeName>IntCoord</TypeName>
			<MarshalTypeName>IntCoord</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (IntCoord)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntCoord) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="const MyGUI::types::TCoord &lt; int &gt; &amp;">
			<TypeName>IntCoord</TypeName>
			<MarshalTypeName>IntCoord</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (IntCoord)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntCoord) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TCoord &lt; int &gt; &amp;">
			<TypeName>IntCoord</TypeName>
			<MarshalTypeName>IntCoord</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In, Out]</MarshalAs>
			<MarshalConvertBefore> (IntCoord)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntCoord) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TCoord &lt; float &gt;">
			<TypeName>FloatCoord</TypeName>
			<MarshalTypeName>FloatCoord</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (FloatCoord)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatCoord) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="const MyGUI::types::TCoord &lt; float &gt; &amp;">
			<TypeName>FloatCoord</TypeName>
			<MarshalTypeName>FloatCoord</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (FloatCoord)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatCoord) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TCoord &lt; float &gt; &amp;">
			<TypeName>FloatCoord</TypeName>
			<MarshalTypeName>FloatCoord</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In, Out]</MarshalAs>
			<MarshalConvertBefore> (FloatCoord)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatCoord) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="MyGUI::types::TRect &lt; int &gt;">
			<TypeName>IntRect</TypeName>
			<MarshalTypeName>IntRect</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (IntRect)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntRect) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="const MyGUI::types::TRect &lt; int &gt; &amp;">
			<TypeName>IntRect</TypeName>
			<MarshalTypeName>IntRect</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (IntRect)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntRect) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TRect &lt; int &gt; &amp;">
			<TypeName>IntRect</TypeName>
			<MarshalTypeName>IntRect</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In, Out]</MarshalAs>
			<MarshalConvertBefore> (IntRect)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IntRect) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TRect &lt; float &gt;">
			<TypeName>FloatRect</TypeName>
			<MarshalTypeName>FloatRect</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (FloatRect)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatRect) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="const MyGUI::types::TRect &lt; float &gt; &amp;">
			<TypeName>FloatRect</TypeName>
			<MarshalTypeName>FloatRect</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (FloatRect)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatRect) ) </MarshalConvertPost>
		</TypeInfo>
		<TypeInfo name="MyGUI::types::TRect &lt; float &gt; &amp;">
			<TypeName>FloatRect</TypeName>
			<MarshalTypeName>FloatRect</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In, Out]</MarshalAs>
			<MarshalConvertBefore> (FloatRect)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(FloatRect) ) </MarshalConvertPost>
		</TypeInfo>


		<TypeInfo name="MyGUI::Align">
			<TypeName>Align</TypeName>
			<MarshalTypeName>Align</MarshalTypeName>
			<MarshalTypeNameReturn>Align</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.I4)]</MarshalAs>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.I4)]</MarshalAsReturn>
		</TypeInfo>

		<TypeInfo name="MyGUI::FlowDirection">
			<TypeName>FlowDirection</TypeName>
			<MarshalTypeName>FlowDirection</MarshalTypeName>
			<MarshalTypeNameReturn>FlowDirection</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.I4)]</MarshalAs>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.I4)]</MarshalAsReturn>
		</TypeInfo>

		<TypeInfo name="MyGUI::ResizingPolicy">
			<TypeName>ResizingPolicy</TypeName>
			<MarshalTypeName>ResizingPolicy</MarshalTypeName>
			<MarshalTypeNameReturn>ResizingPolicy</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.I4)]</MarshalAs>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.I4)]</MarshalAsReturn>
		</TypeInfo>

		<TypeInfo name="MyGUI::WidgetStyle">
			<TypeName>WidgetStyle</TypeName>
			<MarshalTypeName>WidgetStyle</MarshalTypeName>
			<MarshalTypeNameReturn>WidgetStyle</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.I4)]</MarshalAs>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.I4)]</MarshalAsReturn>
		</TypeInfo>

		<TypeInfo name="MyGUI::KeyCode">
			<TypeName>KeyCode</TypeName>
			<MarshalTypeName>KeyCode</MarshalTypeName>
			<MarshalTypeNameReturn>KeyCode</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.I4)]</MarshalAs>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.I4)]</MarshalAsReturn>
		</TypeInfo>

		<TypeInfo name="MyGUI::MouseButton">
			<TypeName>MouseButton</TypeName>
			<MarshalTypeName>MouseButton</MarshalTypeName>
			<MarshalTypeNameReturn>MouseButton</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.I4)]</MarshalAs>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.I4)]</MarshalAsReturn>
		</TypeInfo>

		<TypeInfo name="MyGUI::MenuItemType">
			<TypeName>MenuItemType</TypeName>
			<MarshalTypeName>MenuItemType</MarshalTypeName>
			<MarshalTypeNameReturn>MenuItemType</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.I4)]</MarshalAs>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.I4)]</MarshalAsReturn>
		</TypeInfo>

		<TypeInfo name="const MyGUI::DDWidgetState &amp;">
			<TypeName>DDWidgetState</TypeName>
			<MarshalTypeName>DDWidgetState</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (DDWidgetState)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(DDWidgetState) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="MyGUI::DDItemState">
			<TypeName>DDItemState</TypeName>
			<MarshalTypeName>DDItemState</MarshalTypeName>
			<MarshalTypeNameReturn>DDItemState</MarshalTypeNameReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.I4)]</MarshalAs>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.I4)]</MarshalAsReturn>
		</TypeInfo>

		<TypeInfo name="const MyGUI::DDItemInfo &amp;">
			<TypeName>DDItemInfo</TypeName>
			<MarshalTypeName>DDItemInfo</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (DDItemInfo)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(DDItemInfo) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="const MyGUI::IBNotifyItemData &amp;">
			<TypeName>IBNotifyItemData</TypeName>
			<MarshalTypeName>IBNotifyItemData</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (IBNotifyItemData)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IBNotifyItemData) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="const MyGUI::ToolTipInfo &amp;">
			<TypeName>ToolTipInfo</TypeName>
			<MarshalTypeName>ToolTipInfo</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (ToolTipInfo)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(ToolTipInfo) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="const MyGUI::IBDrawItemInfo &amp;">
			<TypeName>IBDrawItemInfo</TypeName>
			<MarshalTypeName>IBDrawItemInfo</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (IBDrawItemInfo)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(IBDrawItemInfo) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="const MyGUI::Colour &amp;">
			<TypeName>Colour</TypeName>
			<MarshalTypeName>Colour</MarshalTypeName>
			<MarshalTypeNameReturn>IntPtr</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In]</MarshalAs>
			<MarshalConvertBefore> (Colour)Marshal.PtrToStructure( </MarshalConvertBefore>
			<MarshalConvertPost> , typeof(Colour) ) </MarshalConvertPost>
		</TypeInfo>

		<TypeInfo name="MyGUI::Any">
			<TypeName>object</TypeName>
			<MarshalTypeName>object</MarshalTypeName>
			<MarshalTypeNameReturn>object</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.IUnknown)]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.IUnknown)]</MarshalAs>
		</TypeInfo>





		<TypeInfo name="MyGUI::Button *">
			<TypeName>Button</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>Button</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::ComboBox *">
			<TypeName>ComboBox</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>ComboBox</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::DDContainer *">
			<TypeName>DDContainer</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>DDContainer</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::EditBox *">
			<TypeName>EditBox</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>EditBox</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::ItemBox *">
			<TypeName>ItemBox</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>ItemBox</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::ListBox *">
			<TypeName>ListBox</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>ListBox</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::MenuBar *">
			<TypeName>MenuBar</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>MenuBar</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::MenuControl *">
			<TypeName>MenuControl</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>MenuControl</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::MultiListBox *">
			<TypeName>MultiListBox</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>MultiListBox</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::PopupMenu *">
			<TypeName>PopupMenu</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>PopupMenu</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::ProgressBar *">
			<TypeName>ProgressBar</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>ProgressBar</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::ScrollView *">
			<TypeName>ScrollView</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>ScrollView</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::ImageBox *">
			<TypeName>ImageBox</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>ImageBox</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::TextBox *">
			<TypeName>TextBox</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>TextBox</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::TabControl *">
			<TypeName>TabControl</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>TabControl</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::ScrollBar *">
			<TypeName>ScrollBar</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>ScrollBar</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::Widget *">
			<TypeName>Widget</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>Widget</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>
		<TypeInfo name="MyGUI::Widget * &amp;">
			<TypeName>Widget</TypeName>
			<MarshalTypeName>IntPtr</MarshalTypeName>
			<MarshalTypeNameReturn>Widget</MarshalTypeNameReturn>
			<TypePrefix>ref</TypePrefix>
			<MarshalAs>[In, Out]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::Window *">
			<TypeName>Window</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>Window</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::MenuItem *">
			<TypeName>MenuItem</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>MenuItem</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::TabItem *">
			<TypeName>TabItem</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>TabItem</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

		<TypeInfo name="MyGUI::MultiListItem *">
			<TypeName>MultiListItem</TypeName>
			<MarshalTypeName>BaseWidget</MarshalTypeName>
			<MarshalTypeNameReturn>MultiListItem</MarshalTypeNameReturn>
			<MarshalAsReturn>[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAsReturn>
			<MarshalAs>[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(InterfaceMarshaler))]</MarshalAs>
		</TypeInfo>

	</TypeHolder>

	<Item type="MyGUI::WidgetInput" namespace="MyGUI">
		<Template type="Export_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_WidgetInput.cpp"/>
		<Template type="Sharp_Templates" name="Part.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_WidgetInput.cs"/>
		<Tag key="ThisName" value="Widget"/>
		<Tag key="ThisType" value="Widget"/>
		<Member name="setMaskPick" template="Empty.txt"/>
	</Item>

	<Item type="MyGUI::UserData" namespace="MyGUI">
		<Template type="Export_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_WidgetUserData.cpp"/>
		<Template type="Sharp_Templates" name="Part.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_WidgetUserData.cs"/>
		<Tag key="ThisName" value="Widget"/>
		<Tag key="ThisType" value="Widget"/>
		<Member name="setUserData" template="Empty.txt"/>
		<Member name="getUserData" template="Empty.txt"/>
    <Member name="getUserStrings" template="Empty.txt"/>
  </Item>

	<Item type="MyGUI::ICroppedRectangle" namespace="MyGUI">
		<Template type="Export_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_WidgetCropped.cpp"/>
		<Template type="Sharp_Templates" name="Part.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_WidgetCropped.cs"/>
		<Tag key="ThisName" value="Widget"/>
		<Tag key="ThisType" value="Widget"/>
		<Member name="getCroppedParent" template="Empty.txt"/>
	</Item>

	<Item type="MyGUI::Widget" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_Widget.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_Widget.cs"/>
		<Tag key="BaseName" value="BaseWidget"/>
		<Tag key="ThisName" value="Widget"/>
		<Tag key="ThisType" value="Widget"/>
		<Tag key="Partial" value="partial"/>
		<Member name="createWidgetT" template="Empty.txt"/>
		<Member name="isType" template="Empty.txt"/>
		<Member name="getTypeName" template="Empty.txt"/>
		<Member name="getEnumerator" template="Empty.txt"/>
		<Member name="createWidgetRealT" template="Empty.txt"/>
		<Member name="createWidgetReal" template="Empty.txt"/>
		<Member name="createWidget" template="Empty.txt"/>
		<Member name="findWidgets" template="Empty.txt"/>
	</Item>

	<Item type="MyGUI::Button" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_Button.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_Button.cs"/>
		<Tag key="BaseName" value="TextBox"/>
		<Tag key="ThisName" value="Button"/>
		<Tag key="ThisType" value="Button"/>
	</Item>

	<Item type="MyGUI::ComboBox" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_ComboBox.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_ComboBox.cs"/>
		<Tag key="BaseName" value="EditBox"/>
		<Tag key="ThisName" value="ComboBox"/>
		<Tag key="ThisType" value="ComboBox"/>
		<Member name="getItemDataAt" template="GetItemDataAt.txt"/>
		<!-- попробовать автоматически -->
		<Member name="addItem" template="Method2_1.txt"/>
		<!-- попробовать автоматически -->
		<Member name="insertItemAt" template="Method3_2.txt"/>
	</Item>

	<Item type="MyGUI::DDContainer" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_DDContainer.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_DDContainer.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="DDContainer"/>
		<Tag key="ThisType" value="DDContainer"/>
		<Member name="requestDragWidgetInfo" template="DelegateRequest3_Ref.txt"/>
	</Item>

	<Item type="MyGUI::EditBox" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_EditBox.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_EditBox.cs"/>
		<Tag key="BaseName" value="TextBox"/>
		<Tag key="ThisName" value="EditBox"/>
		<Tag key="ThisType" value="EditBox"/>
	</Item>

	<Item type="MyGUI::ItemBox" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_ItemBox.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_ItemBox.cs"/>
		<Tag key="BaseName" value="DDContainer"/>
		<Tag key="ThisName" value="ItemBox"/>
		<Tag key="ThisType" value="ItemBox"/>
		<Member name="getItemDataAt" template="GetItemDataAt.txt"/>
		<!-- попробовать автоматически -->
		<Member name="addItem" template="Method1_0.txt"/>
		<!-- попробовать автоматически -->
		<Member name="insertItemAt" template="Method2_1.txt"/>
	</Item>

	<Item type="MyGUI::ListBox" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_ListBox.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_ListBox.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="ListBox"/>
		<Tag key="ThisType" value="ListBox"/>
		<Member name="getItemDataAt" template="GetItemDataAt.txt"/>
		<!-- попробовать автоматически -->
		<Member name="addItem" template="Method2_1.txt"/>
		<!-- попробовать автоматически -->
		<Member name="insertItemAt" template="Method3_2.txt"/>
	</Item>

	<Item type="MyGUI::MenuBar" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MenuBar.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_MenuBar.cs"/>
		<Tag key="BaseName" value="MenuControl"/>
		<Tag key="ThisName" value="MenuBar"/>
		<Tag key="ThisType" value="MenuBar"/>
	</Item>

	<Item type="MyGUI::MenuControl" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MenuControl.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_MenuControl.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="MenuControl"/>
		<Tag key="ThisType" value="MenuControl"/>
		<Member name="createItemChildT" template="Empty.txt"/>
		<Member name="createItemChildTAt" template="Empty.txt"/>
		<Member name="getItemDataAt" template="GetItemDataAt.txt"/>
		<Member name="getItemData" template="GetItemDataAt.txt"/>
		<!-- попробовать автоматически -->
		<Member name="addItem" template="MethodReturn4_3_2_1.txt"/>
		<!-- попробовать автоматически -->
		<Member name="insertItemAt" template="MethodReturn5_4_3_2.txt"/>
	</Item>

	<Item type="MyGUI::MultiListBox" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MultiListBox.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_MultiListBox.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="MultiListBox"/>
		<Tag key="ThisType" value="MultiListBox"/>
		<Member name="getItemDataAt" template="GetItemDataAt.txt"/>
		<Member name="getColumnDataAt" template="GetItemDataAt.txt"/>
		<Member name="getSubItemDataAt" template="GetItemDataAt2.txt"/>
		<!-- попробовать автоматически -->
		<Member name="addColumn" template="Method3_2.txt"/>
		<!-- попробовать автоматически -->
		<Member name="insertColumnAt" template="Method4_3.txt"/>
		<!-- попробовать автоматически -->
		<Member name="addItem" template="Method2_1.txt"/>
		<!-- попробовать автоматически -->
		<Member name="insertItemAt" template="Method3_2.txt"/>
	</Item>

	<Item type="MyGUI::PopupMenu" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_PopupMenu.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_PopupMenu.cs"/>
		<Tag key="BaseName" value="MenuControl"/>
		<Tag key="ThisName" value="PopupMenu"/>
		<Tag key="ThisType" value="PopupMenu"/>
	</Item>

	<Item type="MyGUI::ProgressBar" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_ProgressBar.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_ProgressBar.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="ProgressBar"/>
		<Tag key="ThisType" value="ProgressBar"/>
	</Item>

	<Item type="MyGUI::ScrollView" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_ScrollView.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_ScrollVew.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="ScrollView"/>
		<Tag key="ThisType" value="ScrollView"/>
	</Item>

	<Item type="MyGUI::ImageBox" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_ImageBox.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_ImageBox.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="ImageBox"/>
		<Tag key="ThisType" value="ImageBox"/>
		<Member name="setItemResourcePtr" template="Empty.txt"/>
		<Member name="setItemResourceInfo" template="Empty.txt"/>
		<Member name="getItemResource" template="Empty.txt"/>
		<Member name="setItemResourceInfo" template="Empty.txt"/>
	</Item>

	<Item type="MyGUI::TextBox" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_TextBox.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_TextBox.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="TextBox"/>
		<Tag key="ThisType" value="TextBox"/>
	</Item>

	<Item type="MyGUI::TabControl" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_TabControl.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_TabControl.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="TabControl"/>
		<Tag key="ThisType" value="TabControl"/>
		<Member name="getItemDataAt" template="GetItemDataAt.txt"/>
		<Member name="getItemData" template="GetItemDataAt.txt"/>
		<!-- попробовать автоматически -->
		<Member name="addItem" template="MethodReturn2_1.txt"/>
		<!-- попробовать автоматически -->
		<Member name="insertItemAt" template="MethodReturn3_2.txt"/>
	</Item>

	<Item type="MyGUI::ScrollBar" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_ScrollBar.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_ScrollBar.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="ScrollBar"/>
		<Tag key="ThisType" value="ScrollBar"/>
	</Item>

	<Item type="MyGUI::Window" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_Window.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_Window.cs"/>
		<Tag key="BaseName" value="TextBox"/>
		<Tag key="ThisName" value="Window"/>
		<Tag key="ThisType" value="Window"/>
		<Member name="destroySmooth" template="Empty.txt"/>
	</Item>

	<Item type="MyGUI::MenuItem" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MenuItem.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_MenuItem.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="MenuItem"/>
		<Tag key="ThisType" value="MenuItem"/>
		<Member name="createItemChildT" template="Empty.txt"/>
		<Member name="setItemData" template="Empty.txt"/>
		<Member name="getItemData" template="PropertyDataGetSet.txt"/>
	</Item>

	<Item type="MyGUI::TabItem" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_TabItem.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_TabItem.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="TabItem"/>
		<Tag key="ThisType" value="TabItem"/>
		<Member name="setItemData" template="Empty.txt"/>
		<Member name="getItemData" template="PropertyDataGetSet.txt"/>
	</Item>

	<Item type="MyGUI::MultiListItem" namespace="MyGUI">
		<Template template="ExportWidget.txt" type="Export_Templates" name="Export.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_ExportWidget.cpp"/>
		<Template template="ExportMarshalingWidget.txt" type="Export_Templates" name="ExportMarshaling.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MarshalingWidget.h"/>
		<Template template="RegisterFactory.txt" type="Sharp_Templates" name="GuiPart_WrapWidget.txt" output="..\..\..\..\MyGUI_Sharp\Core\Generate\MyGUI_GuiPart_WidgetCreator.cs"/>
		<Template type="Export_Templates" name="Derived_h.txt" output="..\..\..\..\MyGUI_Export\Generate\MyGUI_Export_MultiListItem.h"/>
		<Template type="Sharp_Templates" name="Derived.txt" output="..\..\..\..\MyGUI_Sharp\Widgets\Generate\MyGUI_Sharp_MultiListItem.cs"/>
		<Tag key="BaseName" value="Widget"/>
		<Tag key="ThisName" value="MultiListItem"/>
		<Tag key="ThisType" value="MultiListItem"/>
	</Item>

</Root>
